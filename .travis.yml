env:
    global:
        - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
        - TEST_DEPENDS="numpy==1.11.1"
        - BDIST_PARAMS=""
        - CONFIG_PATH="multibuild_config.sh"
        - USE_CCACHE=1
        - PLAT=x86_64
        - UNICODE_WIDTH=32

# Host Python is only used in staging
language: generic
# Required to invoke docker ourselves as per https://docs.travis-ci.com/user/docker/
sudo: required
services: docker
# https://docs.travis-ci.com/user/reference/trusty/
dist: trusty

# Save some time, we and setup check them out on demand instead
# https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth
git:
    submodules: false

# https://docs.travis-ci.com/user/caching
cache:
  directories:
    # https://stackoverflow.com/questions/39930171/cache-brew-builds-with-travis-ci
    - $HOME/Library/Caches/Homebrew
    - /usr/local/Homebrew/
    # used in OSX custom build script dealing with local bottle caching
    - $HOME/local_bottle_metadata
    # `cache: ccache: true` has no effect if `language:` is not `c` or `cpp`
    - $HOME/.ccache

# Add more cache stages (s2 etc) and corresponding OSX jobs like s1
# if brew builds start to take longer than one Travis time limit
stages:
  - s1
  - final

matrix:
  fast_finish: true
  include:

    # builds for MacOS
    - &osx-70
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=2.7
      stage: final
    - <<: *osx-70
      stage: s1
    - &osx-80
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.4
      stage: final
    - <<: *osx-80
      stage: s1
    - &osx-90
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.5
      stage: final
    - <<: *osx-90
      stage: s1
    - &osx-100
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.6
    - <<: *osx-100
      stage: s1
    - &osx-110
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.7
      stage: final
    - <<: *osx-110
      stage: s1

    # headless builds for Linux
    - os: linux
      # the following jobs will use the same stage name by default
      stage: s1
      env:
        - MB_PYTHON_VERSION=2.7
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.4
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.4
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
      cache:
        directories: $HOME/.ccache

# The first line is printed in the folding header in Travis output
before_install: |
    # Check out and prepare the source
    set -e
    set -x

    # Hack, why don't we have pip here?
    #git clone https://github.com/matthew-brett/multibuild.git 
    #source multibuild/common_utils.sh
    
    source factory/factory_utils.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        echo "do nothing"
        #brew update
        #brew install opencv
        #osx_staging_helper
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]]; then 
        if [[ "$(which python)" = "" ]]; then
            alias python='python3'
            alias pip='pip3'
        fi
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py --user
        python -m pip install ubelt --user
        setup_staging_helper
    fi

    #REPO_DIR=${_STAGED_REPO}
    #source multibuild/common_utils.sh
    #source multibuild/travis_steps.sh
    #
    source factory/stage_multibuild.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        osx_staging_helper_clean_brew_cache
    fi
    
    # Not interested in travis internal scripts' output
    set +x

install: |
    #set +e
    echo "REPO_DIR = $REPO_DIR"
    echo "PLAT = $PLAT"

    # Effectively calls (build_bdist_wheel) -> (build_wheel_cmd "bdist_wheel_cmd" $@), 
    # which is in multibuild/common_utils.sh ->
    # This calls pre_build and build_wheel_cmd, which both live in multibuild_config.sh
    set -x
    build_wheel $REPO_DIR $PLAT
    set +x

    #source run_multibuild.sh
    #set -x
    #echo "--- BEGIN EXEC BUILD WHEEL ---"
    #if [ -n "$IS_OSX" ]; then
    #    cd "${_STAGED_REPO}"
    #fi
    #build_wheel $REPO_DIR $PLAT
    #mkdir -p $_SOURCE_REPO/dist
    #mkdir -p $_SOURCE_REPO/wheelhouse
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/dist
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/wheelhouse
    echo "--- END EXEC BUILD WHEEL ---"
    

script: |
    # Install and run tests
    set -x
    echo "--- BEGIN INSTALL RUN ---"
    install_run $PLAT && rc=$? || rc=$?
    echo "--- END INSTALL RUN ---"
    set +x

    #otherwise, Travis logic terminates prematurely
    #https://travis-ci.community/t/shell-session-update-command-not-found-in-build-log-causes-build-to-fail-if-trap-err-is-set/817
    trap ERR

    test "$rc" -eq 0

before_cache: |
    # Cleanup dirs to be cached
    set -e; set -x
    if [ -n "$IS_OSX" ]; then

        # When Taps is cached, this dir causes "Error: file exists" on `brew update`
        if [ -e "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask" ]; then
            rm -rf "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask"
        fi

        brew_cache_cleanup

    fi
    set +x; set +e

env:
    # travis encrypt GITHUB_USERNAME=$GITHUB_USERNAME
    - secure: "W86iwY9rCzhQuaxk6ZaX7q/5xefs6Z3EXED1tlNLNcjBiW7Ya8wMsbuk4QiHQ5idqk95cbeNr6jP20bnKE+J2mxn61oFCSdZruJV5UVF1BVqRQlEGj9qmddh51QbXRxY1MWA2dT+fB8aME4AjZH6sn4Gs7Cph3Y/lHZImj7ZzlNhH8Erz3DWyO+9CWJVowxHJL8ydyZ2jYx3BeNscahvWTOtiixCeJwz/7T80slyVGB/Bh/y18ZmJ+c4biBPQKqv6iIv0akFKQy5sfBl0WEEWaodb1vI9clu0WS6ucPI/TJoUOqOcVKe/LwFxFlFk44GimzwszEBnBkcqyjMKWaPQYh+IE5x5JVoIwZJb0TfAb10cL6+WRVWDVxiP5Vx4taD4vAafYLI3S+WPT+Vu2NF2tEGPxVdpXguz+N3cR290Y7knFle/H8pxCJ/sit2uAz/14F6QAJr1bd26yQApW8kipyZty2jrhduZrkGhaRRqIn7r4RFKPzkOCILsX8RDyxXBwBJVuXbLJDBPStVdDyVQlqkpXTPEZV2Pz8sC/uQavQLsOLaZys1rheddZyDXfRPfVQqSQrrnYQZKcIMuNaUBVlF5ebdeGP0NEnye2XOhOPPrkrPB/5UO582qiOCJnXGW/IxCmPmP1TAU19xPK1t8L70wYndkz3OofJeuH4/Ieo="
    # travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD
    - secure: "QPxLV4kUPRXRWRRy18HW4kaDaz1Aq5q6Z8j+R7j7yRKCnCV99luDuG+am2p0UkBjUDr5toMxYO7JP9rVpJsw33IarNP+INUowr1cMTU8ExkTgGRVkD8Q9m31UMmdMsViXnKdptpVG8Y8AssxkoZlxGVUzmfO6zu8icmsjwS5FZbJJt1wmPocAUuG6lSb52p/SlxxTkaSZdfsp1kWiuXALPF8ivuS71a/S10YRb1iUVIrsf6W0WWwmwUloEij90lpG1lrH8yD5fcZ8KpQWYvZUOPQCaDUgWmP6MN1pYWpQGo+JMV7HteSMpYhPgubLiPEmEiNRAxbn8Hen8W2a5yjxtDVs1nZzuVaHuSYnzedyiI3cC/OplEJglA/94mBgpeUdAGYVNXWecAkrHPq8dG06ypo/Dw1DF8YIpqtpthP1stH32JFFz2lutm+EtbcZxIXratz8AnKYdsba11i2OgtTgLpvJ0yJBCZTp2VsYbyp4dgy2fqzbrOEPI8D7tyBQajlYIgkLrQWElnlPZYxiaY/glkVVyGJjPmkp5iYUza8hxXr5v62k3mwNJfq8McJn5JRLsr1Y7XxGTGNnGE5O5TnyqlxMYIliGeT7ltx7HagA5gsRx15Rw8uGWzxkdtVIkOu/wLLJ5Oq01u/MQsqm+fguU06lZymh7ZyJSNK3LQBxM="

after_success: |
    echo "TRAVIS_TAG = ${TRAVIS_TAG}"
    echo "TRAVIS_BRANCH = ${TRAVIS_BRANCH}"
    if [ -n "$TRAVIS_BRANCH" ]; then
        set +x
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install --user twine
          pip install --user --upgrade six
        fi

        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install twine
          pip install --upgrade pyOpenSSL
        fi

        echo "TRAVIS_BUILD_DIR $TRAVIS_BUILD_DIR"
        twine upload -u ${GITHUB_USERNAME} -p ${TWINE_PASSWORD} --skip-existing ${TRAVIS_BUILD_DIR}/wheelhouse/pyhesaff*
        #twine upload -u ${GITHUB_USERNAME} -p ${TWINE_PASSWORD} --skip-existing wheelhouse/pyhesaff*
    else
        echo "Tag not set, deployment skipped."
    fi
