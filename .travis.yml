env:
    global:
        - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
        - TEST_DEPENDS="numpy==1.11.1"
        - BDIST_PARAMS=""
        - CONFIG_PATH="multibuild_config.sh"
        - USE_CCACHE=1
        - PLAT=x86_64
        - UNICODE_WIDTH=32
        ## travis encrypt GITHUB_USERNAME=$GITHUB_USERNAME -r Erotemic/hesaff
        - secure: "WomGsFAnYNRy+OWT7Eo1fIO0GJvOQeZ/ovZyvfIowPFqFF1cmWJ4XVcT6qkeeJr1ca1op1zWJerAzJa1Sewj++6q4hhTd6MxqyU6nuoao1PaTZA5XL6qzXTU4EObT79xaE0fM7RO39qm6t7McmN6SS8xhq0itmcSrXjTYUyDqW4gdOlK70CpEb6c23RN9+ommcaAqEz4QP7t2iONF6USeJPx3xQkrKg+zPdkADkAHhy0GNP1dk8FI4tUmft1sDUho9qCMVDYTV88wY+ARnC9sAFWvJcz6lktxr+SxIgcYNJlKXp3Ot4EpsTaxO5mkzvMi3YSKywXyco2ozBvoW5Yo5NNly9rFlovUpQKj/pcwb1c2UYcflDBNII4VhyG93/UID5PYV4z6ipktt0k1kcp/p4wVkzavMZ2Q/dB6zGnHMV1+rJcuUghkHm3esmy7/FiaCTAO7c7ZMJjhNKeA+a4ZG5rq8gnU/JcX5x3Nm+/Oal0hCHGVHo4Solx2ochwAY2H4bIClG2v8lfQhG5fxVoqXkZqJIArVku01ifXlJM5QBRMyFmnvJbFB9P7WHv0nb4xIhvEowWs9dbGJAaRs+JYVaK2fLnSObxPErU/crtKwkBNjWvn+A//Ji0hfHl/QhmJGp4pTdsU25a2aaRw9sdzDx0AXXc6r4ArTsMkEpIzv4="
        ## travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD -r Erotemic/hesaff
        - secure: "Bg6XqdzG6FiKg5Ctu24wf702EAqjq0Tiwbv9A1aothvBv4Qtrb1grwRDTUfYhtmNEMxUNozKYb9sbGxSOf5ne7C4KglEyonaxI51lFN3GgC5hMIGGiTwNxli1ANrUiPoMXLFjXVKIhXwmOs+6DE5F5Gic1DKaxr/D9KJ1FnaBl8zycpUi+4d/YDvn4i1dwfFQvfgaPXVp/DOQjruAKeCdroftPZNTWQCbf3Lp/HvKvMEKTTcOvtwxQSqlt4N9vnNr5s/igZAiUK22X0AWMvQfhDoK0CN7h8KyRW6EHpRb5ngmA2a9pHkaVBh4HlERUBstcLdNhfdN+cQr9XyCT4YAQg8aqdS7LTh6Y447Xb46Z/h5bn2SPrIhmbtlCyrGm1HoRs6erChyXFKHFKwKaDlgiMkyY45G4csOpXnAVGtreMkISTxvy2oJakTi+a9AEyPQj1wsuEdujPEhKshca5ePnqCCV8nZYdMd9b4RQ+JmbVSOwbhjTCUSoNN43anXbbTvGQa4JBLmYobJVy7W92fUVEIEezaVnZNkzjktqAWzi67lQy0wNWtV8p2IjLlApBs6wNmIL44UA1K+7jZjUddCAvm8+uqITL+Q3hXqiPSVZ2fKnAw2jxi/lGfbN4K8uBgRtSdc+LzHM7363cfwPP3gl54eHOt/UE9LPggcwJwuHM="

# Host Python is only used in staging
language: generic
# Required to invoke docker ourselves as per https://docs.travis-ci.com/user/docker/
sudo: required
services: docker
# https://docs.travis-ci.com/user/reference/trusty/
dist: trusty

# Save some time, we and setup check them out on demand instead
# https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth
git:
    submodules: false

# https://docs.travis-ci.com/user/caching
cache:
  directories:
    # https://stackoverflow.com/questions/39930171/cache-brew-builds-with-travis-ci
    - $HOME/Library/Caches/Homebrew
    - /usr/local/Homebrew/
    # used in OSX custom build script dealing with local bottle caching
    - $HOME/local_bottle_metadata
    # `cache: ccache: true` has no effect if `language:` is not `c` or `cpp`
    - $HOME/.ccache

# Add more cache stages (s2 etc) and corresponding OSX jobs like s1
# if brew builds start to take longer than one Travis time limit
stages:
  - s1
  - final

matrix:
  fast_finish: true
  include:

    # builds for MacOS
    - &osx-70
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=2.7
      stage: final
    - <<: *osx-70
      stage: s1
    - &osx-80
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.4
      stage: final
    - <<: *osx-80
      stage: s1
    - &osx-90
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.5
      stage: final
    - <<: *osx-90
      stage: s1
    - &osx-100
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.6
      stage: final
    - <<: *osx-100
      stage: s1
    - &osx-110
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.7
      stage: final
    - <<: *osx-110
      stage: s1

    # headless builds for Linux
    - os: linux
      # the following jobs will use the same stage name by default
      stage: s1
      env:
        - MB_PYTHON_VERSION=2.7
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.4
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.4
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.5
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
      cache:
        directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
      cache:
        directories: $HOME/.ccache

# The first line is printed in the folding header in Travis output
before_install: |
    # Check out and prepare the source
    set -e
    set -x

    # Hack, why don't we have pip here?
    #git clone https://github.com/matthew-brett/multibuild.git 
    #source multibuild/common_utils.sh
    
    source factory/factory_utils.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        echo "do nothing"
        #brew update
        #brew install opencv
        #osx_staging_helper
    elif [[ "$TRAVIS_OS_NAME" = "linux" ]]; then 
        if [[ "$(which python)" = "" ]]; then
            alias python='python3'
            alias pip='pip3'
        fi
        curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
        python get-pip.py --user
        python -m pip install ubelt --user
        setup_staging_helper
    fi

    #REPO_DIR=${_STAGED_REPO}
    #source multibuild/common_utils.sh
    #source multibuild/travis_steps.sh
    #
    source factory/stage_multibuild.sh

    if [[ "$TRAVIS_OS_NAME" = "osx" ]]; then 
        osx_staging_helper_clean_brew_cache
    fi
    
    # Not interested in travis internal scripts' output
    set +x

install: |
    #set +e
    echo "REPO_DIR = $REPO_DIR"
    echo "PLAT = $PLAT"

    # Effectively calls (build_bdist_wheel) -> (build_wheel_cmd "bdist_wheel_cmd" $@), 
    # which is in multibuild/common_utils.sh ->
    # This calls pre_build and build_wheel_cmd, which both live in multibuild_config.sh
    set -x
    build_wheel $REPO_DIR $PLAT
    set +x

    #source run_multibuild.sh
    #set -x
    #echo "--- BEGIN EXEC BUILD WHEEL ---"
    #if [ -n "$IS_OSX" ]; then
    #    cd "${_STAGED_REPO}"
    #fi
    #build_wheel $REPO_DIR $PLAT
    #mkdir -p $_SOURCE_REPO/dist
    #mkdir -p $_SOURCE_REPO/wheelhouse
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/dist
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/wheelhouse
    echo "--- END EXEC BUILD WHEEL ---"
    

script: |
    # Install and run tests
    set -x
    echo "--- BEGIN INSTALL RUN ---"
    install_run $PLAT && rc=$? || rc=$?
    echo "--- END INSTALL RUN ---"
    set +x

    #otherwise, Travis logic terminates prematurely
    #https://travis-ci.community/t/shell-session-update-command-not-found-in-build-log-causes-build-to-fail-if-trap-err-is-set/817
    trap ERR

    test "$rc" -eq 0

before_cache: |
    # Cleanup dirs to be cached
    set -e; set -x
    if [ -n "$IS_OSX" ]; then

        # When Taps is cached, this dir causes "Error: file exists" on `brew update`
        if [ -e "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask" ]; then
            rm -rf "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask"
        fi

        brew_cache_cleanup

    fi
    set +x; set +e

after_success: 
    # travis encrypt SOMEVAR=[secret] -r Erotemic/hesaff
    - secure: BjnarsK2187n4DxoTvZ0f7g9JIbb6FhHF8osNnvM8KvuqXMeqVDQjp1IPcMeyMHDdVd0sXjPgRpkWGMGItDTHAGVP7M9vaKvHAfUnAZQ9Z2c8lfI72ybLO70Nd9a3zLbhIRTyZTNdXI6L5qRRFeDzHrVJAaPGWhqUjikahZfzAU7GariM44sY9fYdCKEW7x3wshL/Gf5bfKXdVXuthUe02LJlZ2S09n+qAhUrcYu9gJg6yXTWMd24vPKr+n7Uf1Zvx0H0XeoqLj917Z970959RPRHaUGrSd2Wra+v4K01dd5RjGB33s/I1A+c0HKZW0VmiBLzol64kD/nbRqOls/tyw7IgbsoKKuPYngJ3myggs0tNWU4zsfBv2iVszn31g+N+b8vKdQaw0IDf6EAy/2UxkNk+Ktxl0TqKbb4OPkjWT2rk8rL5mdg2vcL3AyT6t+ByReopbHON2lWkuz7hoZOYVwUZ6p33yb7EwyJzjOg+EY3Ph7nF5kGntARmdeleLdQc26W1ni++lUz9333vU/FHPMWXzmkdAX8pmxm1/AGUcv3idE51BPqND+Ky+xlqSyJiA00nq4V5XtYAe+dsu+IHEACWlKJjauPY6D/THp34BdpZPANsr+U2xyzeiMwMRR24RBKTrdIgN9gwQG4NuJ/zgOEV1uQGR4Hkucw3cZ1L0=
    - echo "AN_UNSECURE_VAR = $AN_UNSECURE_VAR"
    - echo "SOMEVAR = $SOMEVAR"
    - echo "TEST_DEPENDS = $TEST_DEPENDS"
    - echo "GITHUB_USERNAME = $GITHUB_USERNAME"
    - echo "TRAVIS_TAG = ${TRAVIS_TAG}"
    - echo "TRAVIS_BRANCH = ${TRAVIS_BRANCH}"
    - |
        TARGET_BRANCH="release"
        TARGET_BRANCH="dev/wheels"
        if [ "$TRAVIS_BRANCH" == "$TARGET_BRANCH" ]; then
            set +x
            if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
              pip install pyopenssl ndg-httpsclient pyasn1 -U --user
              pip install requests[security] --user
              pip install twine --user
              pip install six -U --user
            fi

            if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
              pip install twine
              pip install --upgrade pyOpenSSL
            fi

            echo "TRAVIS_BUILD_DIR $TRAVIS_BUILD_DIR"
            twine upload --verbose -u "${GITHUB_USERNAME}" -p "${TWINE_PASSWORD}" --skip-existing ${TRAVIS_BUILD_DIR}/wheelhouse/pyhesaff*
            #twine upload -u "${GITHUB_USERNAME}" -p "${TWINE_PASSWORD}" --skip-existing wheelhouse/pyhesaff*
        else
            echo "Tag not set, deployment skipped."
        fi
