env:
    global:
        - "PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'"
        - TEST_DEPENDS="numpy==1.11.1"
        - BDIST_PARAMS=""
        - CONFIG_PATH="travis_config.sh"
        - USE_CCACHE=1
        - PLAT=x86_64
        - UNICODE_WIDTH=32


# Host Python is only used in staging
language: generic
# Required to invoke docker ourselves as per https://docs.travis-ci.com/user/docker/
sudo: required
services: docker
# https://docs.travis-ci.com/user/reference/trusty/
dist: trusty

# Save some time, we and setup check them out on demand instead
# https://docs.travis-ci.com/user/customizing-the-build/#Git-Clone-Depth
git:
    submodules: false

# https://docs.travis-ci.com/user/caching
cache:
  directories:
    # https://stackoverflow.com/questions/39930171/cache-brew-builds-with-travis-ci
    - $HOME/Library/Caches/Homebrew
    - /usr/local/Homebrew/
    # used in OSX custom build script dealing with local bottle caching
    - $HOME/local_bottle_metadata
    # `cache: ccache: true` has no effect if `language:` is not `c` or `cpp`
    - $HOME/.ccache

# Add more cache stages (s2 etc) and corresponding OSX jobs like s1
# if brew builds start to take longer than one Travis time limit
stages:
  - s1
  - final

matrix:
  fast_finish: true
  include:

    # builds for MacOS
    - &osx-70
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=2.7
      stage: final
    - <<: *osx-70
      stage: s1
    #- &osx-80
    #  os: osx
    #  osx_image: xcode8.3
    #  env:
    #    - MB_PYTHON_VERSION=3.4
    #  stage: final
    #- <<: *osx-80
    #  stage: s1
    #- &osx-90
    #  os: osx
    #  osx_image: xcode8.3
    #  env:
    #    - MB_PYTHON_VERSION=3.5
    #  stage: final
    #- <<: *osx-90
    #  stage: s1
    - &osx-100
      os: osx
      osx_image: xcode8.3
      env:
        - MB_PYTHON_VERSION=3.6
    - <<: *osx-100
      stage: s1
    #- &osx-110
    #  os: osx
    #  osx_image: xcode8.3
    #  env:
    #    - MB_PYTHON_VERSION=3.7
    #  stage: final
    #- <<: *osx-110
    #  stage: s1

    # headless builds for Linux
    - os: linux
      # the following jobs will use the same stage name by default
      stage: s1
      env:
        - MB_PYTHON_VERSION=2.7
      cache:
        directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=2.7
    #    - UNICODE_WIDTH=16
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=2.7
    #    - PLAT=i686
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=2.7
    #    - PLAT=i686
    #    - UNICODE_WIDTH=16
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.4
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.4
    #    - PLAT=i686
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.5
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.5
    #    - PLAT=i686
    #  cache:
    #    directories: $HOME/.ccache
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - TEST_DEPENDS=numpy==1.11.3
      cache:
        directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.6
    #    - PLAT=i686
    #    - TEST_DEPENDS=numpy==1.11.3
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.7
    #    - TEST_DEPENDS=numpy==1.14.5
    #  cache:
    #    directories: $HOME/.ccache
    #- os: linux
    #  env:
    #    - MB_PYTHON_VERSION=3.7
    #    - PLAT=i686
    #    - TEST_DEPENDS=numpy==1.14.5
    #  cache:
    #    directories: $HOME/.ccache

# The first line is printed in the folding header in Travis output
before_install: |
    # Check out and prepare the source
    set -e
    set -x

    # Hack, why don't we have pip here?
    #git clone https://github.com/matthew-brett/multibuild.git 
    #source multibuild/common_utils.sh

    if [[ "$(which python)" = "" ]]; then
        alias python='python3'
        alias pip='pip3'
    fi
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python get-pip.py --user

    python -m pip install ubelt --user
    source stage_multibuild.sh
    #bash stage_multibuild.sh
    
    # Not interested in travis internal scripts' output
    set +x

install: |
    source run_multibuild.sh
    #set -x
    #echo "--- BEGIN EXEC BUILD WHEEL ---"
    #if [ -n "$IS_OSX" ]; then
    #    cd "${_STAGED_REPO}"
    #fi
    #build_wheel $REPO_DIR $PLAT
    #mkdir -p $_SOURCE_REPO/dist
    #mkdir -p $_SOURCE_REPO/wheelhouse
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/dist
    #cp ${_STAGED_REPO}/dist/*.whl $_SOURCE_REPO/wheelhouse
    echo "--- END EXEC BUILD WHEEL ---"
    set +x
    

script: |
    # Install and run tests
    set -x
    echo "--- BEGIN INSTALL RUN ---"
    install_run $PLAT && rc=$? || rc=$?
    echo "--- END INSTALL RUN ---"
    set +x

    #otherwise, Travis logic terminates prematurely
    #https://travis-ci.community/t/shell-session-update-command-not-found-in-build-log-causes-build-to-fail-if-trap-err-is-set/817
    trap ERR

    test "$rc" -eq 0

before_cache: |
    # Cleanup dirs to be cached
    set -e; set -x
    if [ -n "$IS_OSX" ]; then

        # When Taps is cached, this dir causes "Error: file exists" on `brew update`
        if [ -e "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask" ]; then
            rm -rf "$(brew --repository)/Library/Taps/homebrew/homebrew-cask/homebrew-cask"
        fi

        brew_cache_cleanup

    fi
    set +x; set +e

after_success: |
    # Upload wheels to pypi if requested
    TRAVIS_TAG="TODO-whatdis?"
    if [ -n "$TRAVIS_TAG" ]; then
        set -x

        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install --user twine
          pip install --user --upgrade six
        fi

        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install twine
          pip install --upgrade pyOpenSSL
        fi

        # TODO:
        echo "TRAVIS_BUILD_DIR $TRAVIS_BUILD_DIR"
        # twine upload -u ${USER} -p ${PASS} --skip-existing ${TRAVIS_BUILD_DIR}/wheelhouse/pyhesaff*
        set +x
    else
        echo "Tag not set, deployment skipped."
    fi


deploy:
  provider: pypi
  user:
      secure: TODO
  password:
    secure: A98+JWLisaKx8j+ZIil/HVvfdj0I0GKwWM2mEgGJmE8y7Se2vkEgesdTbROxKT+2M0qqIFYIva7r4+HYzzNNA9+viebb5pOb0XNe+HNy2NQ778Dp2Cx7iOYfOCfIJ33YHpP9hu+vpIfdCLcs2OF0ExwHWtiSwmpl0sS7G4dDJGxLjJh3eAomhdZWwhQZVtEfppS1SEnkGMa0a4yxJLY5x0TjHN2y9IV6EQlaAQ+LrzwPxn0d6I/bSDtNfHYvbiuakPzCvFhuAZIkdeH9ptkNiJPsOw3KCEniStDw0aQ86xQDGh/2yjJU5tsiZC0NL14j6jaCnuVFXv4/I8gcjPEapUkb1jnfcJ77XCfw0nbTvUv5VhQyPT7Z3iT83TEogZl8UTSfwGgSbdZR5/+e8zcliEq5amoCBrxfXcOrun832BiWYohh4jgv1XCgp3tTGNAr0w0UP2uwlXKnTNdOHOaRSG1LoDBLB24zLtcFl+kUXE+igLX+8JRhzhSO5dEx9edIVD9quqp6FPerfyAdPXoDm35vdjwD2njMnUtuJyoBzMpMjf1CbGfcLstY9PXtB4ukZ1rxzkHkww4Ki3Uz+ibN0SzsJpKm576NEPbkyPcQw3nZn21+4HZJyONWUcQNpEEPQNtxPEY3gpoIyiVNNkW8eDCySWpGi3+2O/wtzbgvqRo=
    branch: release
  #USER:
  #  secure: fXgF9uyy6sT0JoVOR7BoqA==
  #PASS:
  #  secure: 0bXSOVjf9x8L7nErTivu92TF1FwNosTjFJQPmxp8Dys=
